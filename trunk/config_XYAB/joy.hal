#loadusr -Wn display pyvcp -c display displaypanel.xml

loadusr -W hal_input -KRAL Analog

# load the needed components
  loadrt mux2 count=4
  loadrt mux4 count=1
  loadrt scale count=1
#  loadrt joyhandle count=2

# gate for deadband, safety block for disable the jogging without button
  setp mux4.0.in0 100
  setp mux4.0.in1 0.02
  setp mux4.0.in2 0.02
  setp mux4.0.in3 0.02

#enable gates
  setp mux2.0.in0 0
  setp mux2.1.in0 0
  setp mux2.2.in0 0
  setp mux2.3.in0 0

#wire joystick to halui
  net velinX input.0.abs-x-position => mux2.0.in1 mux2.2.in1
  # Y seems to be inverted, fix this with a inverted scale block
  net velinY input.0.abs-y-position => scale.0.in
  net velY scale.0.out => mux2.1.in1 mux2.3.in1

  net veloutX mux2.0.out => halui.jog.0.analog
  net veloutY mux2.1.out => halui.jog.1.analog
  net veloutA mux2.2.out => halui.jog.3.analog
  net veloutB mux2.3.out => halui.jog.4.analog
  
#After all links are done, let's set some parameters, those are the default values, if you feel need to change them, do it accordingly (a - before the sim-encoder.<n>.scale will change the direction if needed):

  setp halui.jog-speed					400
  setp scale.0.offset					0
  setp scale.0.gain						-1
  
net jog-enable halui.jog-deadband <= mux4.0.out

# wire the buttons to enable the jogging
net trigger input.0.btn-trigger => mux4.0.sel0 mux2.0.sel mux2.1.sel
net thumb   input.0.btn-thumb => mux4.0.sel1 mux2.2.sel mux2.3.sel

#Last task to do, attach the realtime functions to the threads (base-thread -- fast functions, servo-thread -- slow)
  addf mux4.0 servo-thread
  addf mux2.0 servo-thread
  addf mux2.1 servo-thread
  addf mux2.2 servo-thread
  addf mux2.3 servo-thread
  addf scale.0 servo-thread